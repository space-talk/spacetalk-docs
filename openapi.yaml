openapi: 3.0.3
info:
  title: SpaceTalk API
  description: API for space situational awareness and space object tracking
  version: 1.0.0
  contact:
    name: SpaceTalk API Team
    email: api@spacetalk.com
servers:
  - url: https://api.spacetalk.com
    description: Production server
  - url: https://dev-api.spacetalk.com
    description: Development server
  - url: http://localhost:3000
    description: Local development server

paths:
  /ssts:
    get:
      summary: Get SSTs
      description: Retrieve a list of Space Situational Tracking (SST) events
      tags:
        - SSTs
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Maximum number of results to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: skip
          in: query
          description: Number of results to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: List of SSTs retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SST'
                  total:
                    type: integer
                  limit:
                    type: integer
                  skip:
                    type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    post:
      summary: Create SST
      description: Create a new Space Situational Tracking event
      tags:
        - SSTs
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSST'
      responses:
        '201':
          description: SST created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SST'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /ssts/{id}:
    get:
      summary: Get SST by ID
      description: Retrieve a specific SST by its ID
      tags:
        - SSTs
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: SST ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
      responses:
        '200':
          description: SST retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SST'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      summary: Update SST
      description: Update an existing SST
      tags:
        - SSTs
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: SST ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSST'
      responses:
        '200':
          description: SST updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SST'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      summary: Delete SST
      description: Delete an SST (admin only)
      tags:
        - SSTs
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: SST ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
      responses:
        '204':
          description: SST deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /ssts/{id}/comments:
    post:
      summary: Create SST Comment
      description: Add a comment to an SST
      tags:
        - SST Comments
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: SST ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateComment'
      responses:
        '201':
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /ssts/export:
    get:
      summary: Export SSTs
      description: Export SST data in various formats
      tags:
        - SSTs
      security:
        - bearerAuth: []
      parameters:
        - name: format
          in: query
          description: Export format
          schema:
            type: string
            enum: [json, csv, xml]
            default: json
      responses:
        '200':
          description: Export data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SST'
            text/csv:
              schema:
                type: string
            application/xml:
              schema:
                type: string

  /spaceObjects:
    get:
      summary: Get Space Objects
      description: Retrieve a list of space objects
      tags:
        - Space Objects
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of space objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpaceObject'

  /spaceObjects/{id}:
    get:
      summary: Get Space Object by ID
      description: Retrieve a specific space object by its ID
      tags:
        - Space Objects
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Space Object ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
      responses:
        '200':
          description: Space object retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpaceObject'

  /users:
    get:
      summary: Get Users
      description: Retrieve a list of users (admin only)
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /users/me:
    get:
      summary: Get Current User
      description: Get information about the current authenticated user
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /auth/login:
    post:
      summary: Login
      description: Authenticate user and return JWT token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /status:
    get:
      summary: API Status
      description: Check API health and status
      tags:
        - System
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
                  timestamp:
                    type: string
                    format: date-time
                  version:
                    type: string
                    example: "1.0.0"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication

  schemas:
    SST:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier
          example: "507f1f77bcf86cd799439011"
        spaceObject:
          $ref: '#/components/schemas/SpaceObject'
        unknownSpaceObjectId:
          type: number
          description: ID for unknown space objects
        publicationStatus:
          type: string
          enum: [published, draft, archived]
        critical:
          type: boolean
          description: Whether this SST event is critical
        sstEvents:
          type: array
          items:
            $ref: '#/components/schemas/SSTEvent'
        feedbackRequestedFrom:
          type: array
          items:
            type: string
            description: User IDs from whom feedback is requested
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - _id
        - critical
        - sstEvents

    CreateSST:
      type: object
      properties:
        spaceObject:
          type: string
          description: Space object ID
        unknownSpaceObjectId:
          type: number
        critical:
          type: boolean
        sstEvents:
          type: array
          items:
            $ref: '#/components/schemas/CreateSSTEvent'
        feedbackRequestedFrom:
          type: array
          items:
            type: string
      required:
        - critical
        - sstEvents

    UpdateSST:
      type: object
      properties:
        critical:
          type: boolean
        sstEvents:
          type: array
          items:
            $ref: '#/components/schemas/CreateSSTEvent'
        feedbackRequestedFrom:
          type: array
          items:
            type: string

    SSTEvent:
      type: object
      properties:
        sstType:
          type: string
          enum: [trajectory, status, operation]
        comment:
          type: string
        orbit:
          $ref: '#/components/schemas/Orbit'
        effectiveAreaMassRatio:
          type: number
          minimum: 0
        operationalStatus:
          type: string
          enum: [operational, non_operational, unknown, disposed]
        debris:
          type: string
          enum: [no, fragmentation, collision, explosion, unknown]
        attitudeStatus:
          type: string
          enum: [stabilized, tumbling, unknown]
        communicationStatus:
          type: string
          enum: [active, inactive, intermittent, unknown]
        orbitalStatus:
          type: string
          enum: [operational, drifting, decaying, disposed]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - sstType

    CreateSSTEvent:
      type: object
      properties:
        sstType:
          type: string
          enum: [trajectory, status, operation]
        comment:
          type: string
        orbit:
          $ref: '#/components/schemas/CreateOrbit'
        effectiveAreaMassRatio:
          type: number
          minimum: 0
        operationalStatus:
          type: string
          enum: [operational, non_operational, unknown, disposed]
        debris:
          type: string
          enum: [no, fragmentation, collision, explosion, unknown]
      required:
        - sstType

    Orbit:
      type: object
      properties:
        orbitCategory:
          type: string
          enum: [LEO, MEO, GEO, HEO, LUNAR, INTERPLANETARY]
        apogee:
          type: number
          description: Apogee altitude in km
        perigee:
          type: number
          description: Perigee altitude in km
        inclination:
          type: number
          description: Orbital inclination in degrees
        accuracy:
          type: number
          description: Orbital accuracy in km
        raan:
          type: number
          description: Right ascension of ascending node in degrees
        perigeeArgument:
          type: number
          description: Argument of perigee in degrees
        epoch:
          type: string
          format: date-time
          description: Epoch of the orbital elements
        meanAnomalyAtEpoch:
          type: number
          description: Mean anomaly at epoch in degrees
      required:
        - orbitCategory
        - apogee
        - perigee
        - inclination
        - raan
        - perigeeArgument
        - epoch

    CreateOrbit:
      type: object
      properties:
        orbitCategory:
          type: string
          enum: [LEO, MEO, GEO, HEO, LUNAR, INTERPLANETARY]
        apogee:
          type: number
          description: Apogee altitude in km
        perigee:
          type: number
          description: Perigee altitude in km
        inclination:
          type: number
          description: Orbital inclination in degrees
        accuracy:
          type: number
          description: Orbital accuracy in km
        raan:
          type: number
          description: Right ascension of ascending node in degrees
        perigeeArgument:
          type: number
          description: Argument of perigee in degrees
        epoch:
          type: string
          format: date-time
          description: Epoch of the orbital elements
        meanAnomalyAtEpoch:
          type: number
          description: Mean anomaly at epoch in degrees
      required:
        - orbitCategory
        - apogee
        - perigee
        - inclination
        - raan
        - perigeeArgument
        - epoch

    SpaceObject:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier
        name:
          type: string
          description: Name of the space object
        noradId:
          type: number
          description: NORAD catalog number
        internationalDesignator:
          type: string
          description: International designator (COSPAR ID)
        objectType:
          type: string
          enum: [payload, rocket_body, debris, unknown]
        country:
          type: string
          description: Country of origin
        launchDate:
          type: string
          format: date
        mass:
          type: number
          description: Mass in kg
        dimensions:
          type: object
          properties:
            length:
              type: number
            width:
              type: number
            height:
              type: number
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - _id
        - name

    User:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
          enum: [user, admin, superuser]
        organization:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - _id
        - email
        - role

    Comment:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier
        content:
          type: string
          description: Comment content
        author:
          $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - _id
        - content
        - author

    CreateComment:
      type: object
      properties:
        content:
          type: string
          description: Comment content
          minLength: 1
          maxLength: 5000
      required:
        - content

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
      required:
        - email
        - password

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT authentication token
        user:
          $ref: '#/components/schemas/User'
        expiresIn:
          type: number
          description: Token expiration time in seconds
      required:
        - token
        - user
        - expiresIn

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
        code:
          type: string
          description: Error code
        details:
          type: object
          description: Additional error details
      required:
        - error

  responses:
    BadRequest:
      description: Bad request - invalid input
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Unauthorized - authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Forbidden:
      description: Forbidden - insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

tags:
  - name: SSTs
    description: Space Situational Tracking operations
  - name: SST Comments
    description: Comments on SST events
  - name: Space Objects
    description: Space object management
  - name: Users
    description: User management
  - name: Authentication
    description: Authentication operations
  - name: System
    description: System status and health checks